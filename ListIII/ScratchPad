func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        var indexOfInsertion = IndexPath()
        let item: Element
        
        if indexPath.section == 0 {
            item = selectedItems.remove(at: indexPath.row)
            tableView.deleteRows(at: [indexPath], with: .right)
            self.delegate?.willInsertDeselectedItemIntoSelectionItems(item)
            tableView.reloadData()
            delegate?.willInsertDeselectedItemIntoSelectionItems(item)
            tableView.reloadData()
            let index = indexForDeselectedItemInSelectionItems(item)
            selectionItems.insert(item, at: index)
            indexOfInsertion = IndexPath(row: index, section: 1)
            tableView.insertRows(at: [indexOfInsertion], with: .right)
        } else if indexPath.section == 1 {
            item = selectionItems.remove(at: indexPath.row)
            tableView.deleteRows(at: [indexPath], with: .right)
            
            let seconds = 0.27
            DispatchQueue.main.asyncAfter(deadline: .now() + seconds) {
                self.delegate?.willInsertSelectionItemIntoSelectedItems(item)
                tableView.reloadData()
                DispatchQueue.main.asyncAfter(deadline: .now() + seconds) {
                    self.selectedItems.append(item)
                    indexOfInsertion = IndexPath(row: self.selectedItems.count-1, section: 0)
                    tableView.insertRows(at: [indexOfInsertion], with: .right)
                }
            }
            
            
            
            
        }
        
//        if indexPath.section == 0 {
//            item = selectedItems.remove(at: indexPath.row)
//            let index = indexForDeselectedItemInSelectionItems(item)
//            selectionItems.insert(item, at: index)
//            indexOfInsertion = IndexPath(row: index, section: 1)
//            performSelectionUpdate(tableView, fromIndexPath: indexPath, toIndexPath: indexOfInsertion) { (finished) in
//                usleep(150000)
//                self.delegate?.didDeselectItem(item: item)
//            }
//
//        } else if indexPath.section == 1 {
//            item = selectionItems.remove(at: indexPath.row)
//            selectedItems.append(item)
//            indexOfInsertion = IndexPath(row: selectedItems.count-1, section: 0)
//            performSelectionUpdate(tableView, fromIndexPath: indexPath, toIndexPath: indexOfInsertion, completion: { finished in
//                usleep(150000)
//                self.delegate?.didSelect(item: item)
//            })
//        }
        
//        if indexPath.row < selectedItems.count { //Deselection case
//            item = selectedItems.remove(at: indexPath.row)
//            let (rowIndex, itemsIndex) = indexForDeselectedItem(item)
//            selectionItems.insert(item, at: itemsIndex)
//            indexOfInsertion = IndexPath(row: rowIndex, section: 0)
//            performSelectionUpdate(tableView, fromIndexPath: indexPath, toIndexPath: indexOfInsertion, completion: { finished in
//                self.delegate?.didDeselectItem(item: item)
//            })
//
//        } else { //Selection Case
//            item = selectionItems.remove(at: indexPath.row - selectedItems.count)
//            selectedItems.append(item)
//            indexOfInsertion = IndexPath(row: selectedItems.count - 1, section: 0)
//            performSelectionUpdate(tableView, fromIndexPath: indexPath, toIndexPath: indexOfInsertion, completion: { finished in
//                self.delegate?.didSelect(item: item)
//            })
//        }
    }
    
    
    func didSelect(item: Any) {
        let tag = item as! Tag
        taskFilter.appendTag(withName: tag.name!)
        let pending = taskFilter.pendingTags!
        let associatedTags = Util.associatedTags(for: pending)
        //tagSearch.resetSearchItem(from: associatedTags)
        tagTableViewSelectionManager.set(selectionItems: associatedTags) {return $0 < $1}
        tagPickerView.clearSearchBar()
        tagPickerView!.reloadData()
    }
    

           
    func didDeselectItem(item: Any) {
        let tag = item as! Tag
        taskFilter.removeTag(withName: tag.name!)
        let pendingTags = taskFilter.pendingTags!
        let associatedTags = Util.associatedTags(for: pendingTags)
        //tagSearch.resetSearchItem(from: associatedTags)
        tagTableViewSelectionManager.set(selectionItems: associatedTags) {
            return $0 < $1
        }
        tagPickerView.clearSearchBar()
        tagPickerView!.reloadData()
    }
