extension TaskListViewController: TagFilterViewDelegate {
    func didSelectItem(with tagName: String) {
        taskFilter.appendTag(withName: tagName)
        tagFilterView?.applyButton.setTitle("Show Tasks (\(taskFilter.pendingIntersection!.count))", for: .normal)
    }
    
    func didDeselectItem(with tagName: String) {
        taskFilter.removeTag(withName: tagName)
        var availableTasks = String()
        if let count = taskFilter.pendingIntersection?.count, count > 0{
            availableTasks = String(count)
        } else {
            availableTasks = "All"
        }
        tagFilterView!.applyButton.setTitle("Show Tasks (\(availableTasks))", for: .normal)
    }
    
    func didTapApply() {
        taskFilter.applyFilter()
        if taskFilter.appliedTags.isEmpty {
            tableViewDataSourceDelegateManager!.updateTasks(from: PersistanceManager.instance.fetchTasks())
        } else {
            tableViewDataSourceDelegateManager!.updateTasks(from: Array(taskFilter.appliedIntersection!))
        }
        taskTableView.reloadData()
        tagSelectionTracker.keys.forEach { tagSelectionTracker[$0] = taskFilter.appliedTags.contains($0)}
        tagsTextView.text = taskFilter.appliedTags.map({$0.name!}).joined(separator: " , ")
        animatePopDown()
    }
    
    func didTapCancelButton() {
        taskFilter.cancelFilter()
        animatePopDown()
    }
}

 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
//        if indexPath.row >= selectedItems.count {
//            let index = indexPath.row - selectedItems.count
//            let selectedItem = nonSelectedItems.remove(at: index)
//            selectedItems.append(selectedItem)
//            tagsTableView.beginUpdates()
//            tagsTableView.deleteRows(at: [indexPath], with: .right)
//            tagsTableView.insertRows(at: [IndexPath(row: selectedItems.count - 1, section: 0)], with: .right)
//            tagsTableView.endUpdates()
//            delegate?.didSelectItem(with: selectedItem)
//        } else {
//            let deselectedItem = selectedItems.remove(at: indexPath.row)
//            let indexOfInsertion: IndexPath!
//            if let index = nonSelectedItems.firstIndex(where: {deselectedItem < $0}) {
//                indexOfInsertion = IndexPath(row: selectedItems.count + index, section: 0)
//                nonSelectedItems.insert(deselectedItem, at: index)
//            } else if nonSelectedItems.count == 0 {
//                indexOfInsertion = IndexPath(row: selectedItems.count, section: 0)
//                nonSelectedItems.append(deselectedItem)
//            } else {
//                indexOfInsertion = IndexPath(row: tagsTableView.numberOfRows(inSection: 0) - 1, section: 0)
//                nonSelectedItems.append(deselectedItem)
//            }
//            tagsTableView.beginUpdates()
//            tagsTableView.deleteRows(at: [indexPath], with: .right)
//            tagsTableView.insertRows(at: [indexOfInsertion], with: .right)
//            tagsTableView.endUpdates()
//            delegate?.didDeselectItem(with: deselectedItem)
//        }
//    }
//}

//    private var tagSelectionTracker: [Tag:Bool]!
//    private var selectedTags: [String] {
//        let tags = Array(tagSelectionTracker.filter({$0.value == true}).keys)
//        return tags.map({$0.name!})
//    }
//    private var availableTags: [String] {
//        let tags = Array(tagSelectionTracker.filter({$0.value == false}).keys)
//        return tags.map({$0.name!})
//    }

//        tagSelectionTracker = [Tag:Bool]()
//        tags.forEach({tagSelectionTracker[$0] = false})

